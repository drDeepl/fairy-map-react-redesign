/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/v1/auth/signup": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** регистрация */
    post: operations["AuthController_signUp"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/auth/signin": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** вход */
    post: operations["AuthController_signIn"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/auth/refresh": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**  на обновление access token */
    post: operations["AuthController_refresh"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/auth/logout": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** выход из системы */
    post: operations["AuthController_logout"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/user/me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** получение информации о текущем пользователе */
    get: operations["UserController_getCurrentUserInfo"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/user/{userId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * получение информации о пользователе по его id
     * @description необходима роль администратора
     */
    get: operations["UserController_findUserById"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/user/delete/{userId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * удаленеи пользователя по его id
     * @description необходима роль администратора
     */
    delete: operations["UserController_deleteUser"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/constituent/add": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * добавление субъекта РФ
     * @description необходима роль администратора
     */
    post: operations["ConstituentsController_addConstituent"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/constituent/add/ethnic-group": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * добавление этнической группы к субъекту рф
     * @description небходима роль администратора
     */
    post: operations["ConstituentsController_addEthnicGroupToConstituent"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/constituent/ethnic-group/delete": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * удаление этнической группы у субъекта рф
     * @description необходима роль администратора
     */
    delete: operations["ConstituentsController_deleteEthnicGroupFromConstituent"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/constituent/ethnic-group/{constituentId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** получение этнической группы, принадлежащей субъекту рф */
    get: operations["ConstituentsController_getEthnicGroupByConstituentId"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/constituent/all": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** получение всех субъектов */
    get: operations["ConstituentsController_getConstituents"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/constituent/edit/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * редактирование субъекта
     * @description небходима роль администратора
     */
    put: operations["ConstituentsController_editConstituent"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/constituent/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * удаление данных субъекта
     * @description необходима роль администратора
     */
    delete: operations["ConstituentsController_deleteConstituentById"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/ethnic-group/add": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * добавление этнической группы
     * @description необходима роль администратора
     */
    post: operations["EthnicGroupController_addEthnicGroup"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/ethnic-group/all": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** получение списка этнических групп */
    get: operations["EthnicGroupController_ethnicGroups"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/ethnic-group/{ethnicGroupId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** получение этнической группы по ethnicGroupId */
    get: operations["EthnicGroupController_getEthnicGroupById"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/ethnic-group/edit/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * редактирование этнической группы
     * @description необходима роль администратора
     */
    put: operations["EthnicGroupController_editEthnicGroup"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/ethnic-group/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * удаление этнической группы
     * @description необходима роль администратора
     */
    delete: operations["EthnicGroupController_deleteEthnicGroup"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/ethnic-group/language/add": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * добавление языка этнической группы
     * @description необходима роль администратора
     */
    post: operations["EthnicGroupController_addLanguage"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/ethnic-group/language/all": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** получение списка всех языков */
    get: operations["EthnicGroupController_getAllLanguage"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/ethnic-group/language/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * удаление языка по id
     * @description необходима роль администратора
     */
    delete: operations["EthnicGroupController_deleteLanguageById"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/map/map.json": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** получить данные для отрисовки карты */
    get: operations["MapController_getMapTopojson"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/map/ethnic-groups": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** получение точек этнических групп на карте */
    get: operations["MapController_getEthnicalGroupPoints"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/map/ethnic-groups/{constituentId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** получение точек этнических групп по номеру региона */
    get: operations["MapController_getEthnicalGroupPointsByConstituentId"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/map/ethnic-groups/{name}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** получение точек этнических групп по названию этнической группы */
    get: operations["MapController_getEthnicGroupPointsByName"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/map/ethnic-groups/{pointId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * удаление точки этнической группы
     * @description необходима роль администратора
     */
    delete: operations["MapController_deleteEthnicalGroupPoint"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/map/constituents/filled": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** получение списка субъектов и их заполненности озвучками */
    get: operations["MapController_getPercentsFilledStoriesByConstituentId"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/admin/ethnic-groups/{ethnicGroupId}/constituents/{constituentId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * добавление точки этнической группы на карту
     * @description необходима роль администратора
     */
    post: operations["AdminController_addEthnicalGroupPoint"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/admin/ethnic-groups/{pointId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * удаление точки этнической группы
     * @description необходима роль администратора
     */
    delete: operations["AdminController_deleteEthnicalGroupPoint"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/admin/story/add": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * добавление сказки
     * @description необходима роль администратора
     */
    post: operations["AdminController_addStory"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/admin/story/edit/{storyId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * редактирование сказки
     * @description необходима роль администратора
     */
    put: operations["AdminController_editSotry"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/admin/story/delete/{storyId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * удаление сказки
     * @description необходима роль администратора
     */
    delete: operations["AdminController_deleteStoryById"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/admin/story/text/add/{storyId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * добавление текста сказки
     * @description небходима роль администратора
     */
    post: operations["AdminController_addTextStory"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/story/all": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** получение всех сказок */
    get: operations["StoryController_getAllStories"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/story/by-name/{name}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** получение сказок в которых есть подстрока name */
    get: operations["StoryController_getStoryByName"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/story/{storyId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** получение общей информации о выбранной сказке */
    get: operations["StoryController_getStoryById"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/story/languages/{storyId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** получение доступных языков озвучки для выбранной сказки */
    get: operations["StoryController_getLanguagesForCurrentStory"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/story/ethnic-group/{ethnicGroupId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** получение всех сказок выбранной этнической группы */
    get: operations["StoryController_getStoriesByEthnicGroupId"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/story/text/{storyId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** получение текста сказки */
    get: operations["StoryController_getTextStoryByStoryId"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/story/audio/{audioId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * получение одобренной озвучки по audioId
     * @description возвращает StreamableFile
     */
    get: operations["StoryController_getAudioStoryById"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/story/audio": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * добавление озвучки к сказке
     * @description пример запроса: /api/v1/story/audio?storyId=8 | необходима роль администратора
     */
    put: operations["StoryController_setUserAudioToStory"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/story/image/{storyId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** получение обложки для сказки по storyId */
    get: operations["StoryController_getImgStoryById"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/story/image/upload/{storyId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * загрузка обложки для выбранной сказки
     * @description необходима роль администратора
     */
    put: operations["StoryController_uploadStoryImage"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/story/image/delete/{storyId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * удаление обложки для выбранной сказки по storyId
     * @description необходима роль администратора
     */
    delete: operations["StoryController_deleteStoryImgByStoryId"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/story/rating/{audioId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** получение оценки для выбранной озвучки */
    get: operations["StoryController_getRatingByAudioId"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/story/rating/my/{userAudioId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** получение оценки для выбранной озвучки для текущего пользователя */
    get: operations["StoryController_getRatingByAudioIdForCurrentUser"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/story/rating/add": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** добавление текущим пользователем оценки к озвучке по audioId */
    put: operations["StoryController_addRatingForStoryByCurrentUser"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/user-audio/my-audios": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** получение озвучек текущего пользователя */
    get: operations["UserAudioController_getCurrentUserAudios"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/user-audio/my-audios/approved": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** получение одобренных озвучек текущего пользователя */
    get: operations["UserAudioController_getApprovedUserAudiosCurrentUser"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/user-audio/{userAudioId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** получение файла озвучки пользователя */
    get: operations["UserAudioController_getUserAudioById"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/user-audio/upload/{languageId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * загрузка озвучки пользователя для выбранного языка
     * @description в теле запроса(body) файл прикрепляется к полю file
     */
    put: operations["UserAudioController_uploadUserAudio"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/user-audio/delete/{userAudioId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * удаление озвучки пользователя
     * @description необходима роль администратора
     */
    delete: operations["UserAudioController_deleteUserAudioById"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/audio-story-request/my-requests": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** получение всех заявок на озвучки текущего пользователя */
    get: operations["AudioStoryRequestController_getAllAudioStoryRequestsCurrentUser"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/audio-story-request/all": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * получение всех заявок на озвучки
     * @description необходимы роль модератора
     */
    get: operations["AudioStoryRequestController_getAllAudioStoryRequests"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/audio-story-request/by-user/{userId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * получение всех заявок на озвучки для выбранного пользователя.
     * @description Необходима роль модератора
     */
    get: operations["AudioStoryRequestController_getAllAudioStoryReqeustsByUserId"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/audio-story-request/add": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Создание заявки на проверку озвучки */
    post: operations["AudioStoryRequestController_createAddAudioRequest"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/audio-story-request/edit/{audioStoryReqeustId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * редактирование заявки на проверку озвучки
     * @description необходима роль модератора. после редактирования, отредактированная запись по вебсокету отправляется пользователю из userId(создавшему заявку) в событие с названием "statuses"
     */
    put: operations["AudioStoryRequestController_editAudioStoryRequest"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/audio-story-request/delete/{audioStoryRequestId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * удаление заявки на проверку озвучки
     * @description необходима роль администратора
     */
    delete: operations["AudioStoryRequestController_deleteAudioStoryRequestBydId"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/request/type/all": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** получение списка всех типов заявок */
    get: operations["RequestController_getAllRequestTypes"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/request/type/{typeRequestId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** получение типа заявки по id */
    get: operations["RequestController_getTypeRequestById"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/request/type/add": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * добавление типа заявки
     * @description необходима роль администратора
     */
    post: operations["RequestController_addTypeRequest"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/request/type/edit/{typeRequestId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * редактирование типа заявки
     * @description необходима роль администратора
     */
    put: operations["RequestController_editTypeRequest"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/request/type/delete/{typeRequestId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * удаление типа заявки
     * @description необходима роль администратора
     */
    delete: operations["RequestController_deleteTypeRequestById"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/request/status/all": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** получение существующих статусов для заявок */
    get: operations["RequestController_getRequestStatuses"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/add-story-request/all": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * получение всех заявок на добавление сказки
     * @description необходима роль администратора. пример запроса: /api/v1/add-story-request/all?start=1&count=10
     */
    get: operations["AddStoryRequestController_getAddStoryRequestAll"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/add-story-request/my-requests": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** получение всех заявок на добавление сказки от текущего пользователя */
    get: operations["AddStoryRequestController_getAddStoryRequestForCurrentUser"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/add-story-request/by-user/{userId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * получение всех заявок на добавление сказки для выбранного пользователя
     * @description необходима роль администратора.
     */
    get: operations["AddStoryRequestController_getAddStoryRequestByUserId"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/add-story-request/create": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** создание заявки на добавление сказки */
    post: operations["AddStoryRequestController_createAddStoryRequestForCurrentUser"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/add-story-request/edit/{addStoryRequestId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * обновление заявки
     * @description необходима роль администратора. статус заявки берется из /api/v1/request/status/all | Необходима роль moder | После успешного редактирования данные заявки так же передаются пользователю с userId по веб-сокету
     */
    put: operations["AddStoryRequestController_editStatusAddStoryReqeust"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/add-story-request/delete/{addStoryRequestId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * удаление заявки
     * @description Необходима роль администратора
     */
    delete: operations["AddStoryRequestController_deleteAddStoryRequestById"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    SignUpRequestDto: {
      email: string;
      password: string;
      firstName: string;
      lastName: string;
    };
    TokensResponseDto: {
      /** @description access token */
      accessToken: string;
      /** @description refresh token */
      refreshToken: string;
    };
    ValidationExceptionResponseDto: {
      /** @description статус код */
      statusCode: number;
      /** @description описание ошибки */
      message: string;
      /**
       * @description объекто с полями и массивом ошибок их
       * @example {
       *       "propertyName": [
       *         "message1",
       *         "message2"
       *       ]
       *     }
       */
      validationErrors: Record<string, never>;
    };
    SignInRequestDto: {
      email: string;
      password: string;
    };
    BadRequestDto: {
      statusCode: number;
      message: string[];
      error: string;
    };
    BaseRequestExceptionDto: {
      statusCode: number;
    };
    UserResponseDto: {
      firstName: string;
      lastName: string;
      email: string;
      role: string;
      id: number;
    };
    AddConstituentDto: {
      name: string;
    };
    ConstituentDto: {
      name: string;
      id: number;
    };
    AddEthnicGroupToConstituentDto: {
      constituentRfId: number;
      ethnicGroupId: number;
    };
    EthnicGroupToConstituentDto: {
      constituentRfId: number;
      ethnicGroupId: number;
      id: number;
    };
    DeleteEthnicGroupToConstituentDto: {
      constituentRfId: number;
      ethnicGroupId: number;
    };
    EditConstituentDto: {
      name: string;
      languageId: number;
    };
    AddEthnicGroupDto: {
      name: string;
      languageId: number;
    };
    EthnicGroupDto: {
      name: string;
      languageId: number;
      id: number;
    };
    LanguageDto: {
      name: string;
      id: number;
    };
    EthnicGroupLanguageDto: {
      id: number;
      name: string;
      language: components["schemas"]["LanguageDto"];
    };
    EditEthnicGroupDto: {
      name: string;
      languageId: number;
    };
    AddLanguageDto: {
      name: string;
    };
    StreamableFile: Record<string, never>;
    EthnicGroupMapWithGroupDto: {
      /** @description географическая долгота */
      longitude: number;
      /** @description географическая широта */
      latitude: number;
      ethnicGroup: components["schemas"]["EthnicGroupDto"];
    };
    EthnicGroupMapPointEntity: {
      id: number;
      ethnicGroupId: number;
      longitude: number;
      latitude: number;
    };
    EthnicGroupMapPointEntityWithConstituents: {
      id: number;
      ethnicGroupId: number;
      longitude: number;
      latitude: number;
      /** @description объект региона */
      constituent: components["schemas"]["ConstituentDto"];
    };
    EthnicGroupMapDto: {
      /** @description географическая долгота */
      longitude: number;
      /** @description географическая широта */
      latitude: number;
      id: number;
      constituentId: number;
    };
    ConstituentFilledDto: {
      constituentId: number;
      ethnicGroupCount: number;
      filled: number;
    };
    AddEthnicGroupMapDto: {
      /** @description географическая долгота */
      longitude: number;
      /** @description географическая широта */
      latitude: number;
    };
    AddStoryDto: {
      name: string;
      ethnicGroupId: number;
    };
    StoryDto: {
      name: string;
      id: number;
      audioId: number | null;
      ethnicGroup: components["schemas"]["EthnicGroupDto"];
    };
    EditStoryDto: {
      name: string;
      ethnicGroupId: number;
    };
    AddTextStoryDto: {
      text: string;
    };
    TextStoryDto: {
      text: string;
      id: number;
    };
    AuthorUserDto: {
      /** @description номер пользователя */
      id: number;
      /** @description имя пользователя */
      firstName: string;
      /** @description фамилия пользователя */
      lastName: string;
    };
    AudioStoryLanguageDto: {
      /** @description audioStoryId  */
      id: number;
      /** @description ид озвучки пользователя */
      userAudioId: number;
      /** @description средняя оценка озвучки */
      moderateScore: number;
      /** @description информация о языке */
      language: components["schemas"]["LanguageDto"];
      /** @description информация об авторе */
      authors: components["schemas"]["AuthorUserDto"];
    };
    AddAudioStoryDto: {
      userAudioId: number;
      userId: number;
      /** @description оценка от проверяющего */
      moderateScore: number;
    };
    Buffer: Record<string, never>;
    ImageStoryDto: {
      filename: string;
      buffer: components["schemas"]["Buffer"];
    };
    CreatedImageStoryDto: {
      /** @description ид сказки */
      storyId: number;
      /** @description номер изображения(storyImageId) */
      id: number;
    };
    RatingAudioStoryDto: {
      /** @description номер озвучки */
      audioId: number;
      /** @description среднее значение озвучки */
      ratingAudio: number;
    };
    AddRatingAudioStoryDto: {
      /** @description номер озвучки из таблицы опубликованных озвучек */
      rating: number;
      /** @description номер озвучки */
      audioId: number;
    };
    UserAudioDto: {
      name: string;
      languageId: number;
      /** @description userAudioId */
      id: number;
    };
    ApprovedUserAudioDto: {
      /** @description storyAudioId(ид опубликованной озвучки) */
      id: number;
      /** @description данные озвучки пользователя */
      userAudio: components["schemas"]["UserAudioDto"];
      /** @description id пользователя(автора) */
      author: number;
      /** @description storyAudioId(ид опубликованной озвучки) */
      story: components["schemas"]["StoryDto"];
    };
    BaseUserAudioDto: {
      name: string;
      languageId: number;
    };
    AudioStoryRequestEntity: {
      id: number;
      userId: number;
      userAudioId: number;
      status: string;
      typeId: number;
      storyId: number;
      comment: string;
    };
    AddAudioStoryRequestDto: {
      typeId: number;
      userAudioId: number;
      /** @description ид пользователя, создавшего заявку */
      userId: number;
      storyId: number;
    };
    EditAudioStoryRequestDto: {
      comment: string;
      status: string;
    };
    TypeRequestDto: {
      name: string;
      id: number;
    };
    AddTypeRequestDto: {
      name: string;
    };
    EditTypeRequestDto: {
      name: string;
    };
    AddStoryRequestEntity: {
      id: number;
      /** @description название истории */
      storyName: string;
      /** @description статус заявки */
      status: string;
      /** @description комментарий проверяющего */
      comment: string;
      /** @description ид пользователя, создавшего заявку */
      userId: number;
    };
    AddStoryRequestDto: {
      /** @description название истории */
      storyName: string;
      /** @description порядковый номер заявки */
      id: number;
      /**
       * @description статус заявки
       * @enum {string}
       */
      status: "SEND" | "SUCCESSED" | "CANCELLED";
      /** @description комментарий от проверяющего */
      comment: string;
    };
    CreateAddStoryRequestDto: {
      /** @description название истории */
      storyName: string;
    };
    EditAddStoryRequestDto: {
      /**
       * @description статус заявки берется является ENUM
       * @enum {string}
       */
      status: "SEND" | "SUCCESSED" | "CANCELLED";
      /** @description комментарий */
      comment: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  AuthController_signUp: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignUpRequestDto"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TokensResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ValidationExceptionResponseDto"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuthController_signIn: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignInRequestDto"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TokensResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuthController_refresh: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer refreshToken */
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TokensResponseDto"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuthController_logout: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BadRequestDto"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseRequestExceptionDto"];
        };
      };
    };
  };
  UserController_getCurrentUserInfo: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserResponseDto"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UserController_findUserById: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path: {
        userId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserResponseDto"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UserController_deleteUser: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        userId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserResponseDto"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ConstituentsController_addConstituent: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddConstituentDto"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ConstituentDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ConstituentsController_addEthnicGroupToConstituent: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddEthnicGroupToConstituentDto"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EthnicGroupToConstituentDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ConstituentsController_deleteEthnicGroupFromConstituent: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteEthnicGroupToConstituentDto"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EthnicGroupToConstituentDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ConstituentsController_getEthnicGroupByConstituentId: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        constituentId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EthnicGroupToConstituentDto"][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ConstituentsController_getConstituents: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ConstituentDto"][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ConstituentsController_editConstituent: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EditConstituentDto"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ConstituentsController_deleteConstituentById: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  EthnicGroupController_addEthnicGroup: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddEthnicGroupDto"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EthnicGroupDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  EthnicGroupController_ethnicGroups: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EthnicGroupLanguageDto"][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  EthnicGroupController_getEthnicGroupById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        ethnicGroupId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EthnicGroupDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  EthnicGroupController_editEthnicGroup: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EditEthnicGroupDto"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EthnicGroupDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  EthnicGroupController_deleteEthnicGroup: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  EthnicGroupController_addLanguage: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddLanguageDto"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EthnicGroupDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  EthnicGroupController_getAllLanguage: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LanguageDto"][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  EthnicGroupController_deleteLanguageById: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  MapController_getMapTopojson: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["StreamableFile"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  MapController_getEthnicalGroupPoints: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EthnicGroupMapWithGroupDto"][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  MapController_getEthnicalGroupPointsByConstituentId: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        constituentId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EthnicGroupMapPointEntity"][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  MapController_getEthnicGroupPointsByName: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EthnicGroupMapPointEntityWithConstituents"][];
        };
      };
    };
  };
  MapController_deleteEthnicalGroupPoint: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path: {
        pointId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EthnicGroupMapDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  MapController_getPercentsFilledStoriesByConstituentId: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ConstituentFilledDto"][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AdminController_addEthnicalGroupPoint: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path: {
        ethnicGroupId: number;
        constituentId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddEthnicGroupMapDto"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EthnicGroupMapDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AdminController_deleteEthnicalGroupPoint: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path: {
        pointId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EthnicGroupMapDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AdminController_addStory: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddStoryDto"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["StoryDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AdminController_editSotry: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path: {
        storyId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EditStoryDto"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["StoryDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AdminController_deleteStoryById: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path: {
        storyId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AdminController_addTextStory: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddTextStoryDto"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TextStoryDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  StoryController_getAllStories: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["StoryDto"][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  StoryController_getStoryByName: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["StoryDto"][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  StoryController_getStoryById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        storyId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["StoryDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  StoryController_getLanguagesForCurrentStory: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        storyId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AudioStoryLanguageDto"][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  StoryController_getStoriesByEthnicGroupId: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        ethnicGroupId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["StoryDto"][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  StoryController_getTextStoryByStoryId: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        storyId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TextStoryDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  StoryController_getAudioStoryById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        audioId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["StreamableFile"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  StoryController_setUserAudioToStory: {
    parameters: {
      query: {
        storyId: number;
      };
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddAudioStoryDto"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  StoryController_getImgStoryById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        storyId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ImageStoryDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Image not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  StoryController_uploadStoryImage: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path: {
        storyId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CreatedImageStoryDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  StoryController_deleteStoryImgByStoryId: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path: {
        storyId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  StoryController_getRatingByAudioId: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        audioId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RatingAudioStoryDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  StoryController_getRatingByAudioIdForCurrentUser: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        userAudioId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RatingAudioStoryDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  StoryController_addRatingForStoryByCurrentUser: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddRatingAudioStoryDto"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UserAudioController_getCurrentUserAudios: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserAudioDto"][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UserAudioController_getApprovedUserAudiosCurrentUser: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ApprovedUserAudioDto"][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UserAudioController_getUserAudioById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        userAudioId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["StreamableFile"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UserAudioController_uploadUserAudio: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path: {
        languageId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          file?: string;
        };
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserAudioDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UserAudioController_deleteUserAudioById: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path: {
        userAudioId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseUserAudioDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AudioStoryRequestController_getAllAudioStoryRequestsCurrentUser: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AudioStoryRequestEntity"][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AudioStoryRequestController_getAllAudioStoryRequests: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AudioStoryRequestEntity"][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AudioStoryRequestController_getAllAudioStoryReqeustsByUserId: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path: {
        userId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AudioStoryRequestEntity"][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AudioStoryRequestController_createAddAudioRequest: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddAudioStoryRequestDto"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AudioStoryRequestEntity"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AudioStoryRequestController_editAudioStoryRequest: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path: {
        audioStoryReqeustId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EditAudioStoryRequestDto"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AudioStoryRequestEntity"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AudioStoryRequestController_deleteAudioStoryRequestBydId: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path: {
        audioStoryRequestId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  RequestController_getAllRequestTypes: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TypeRequestDto"][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  RequestController_getTypeRequestById: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path: {
        typeRequestId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TypeRequestDto"][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  RequestController_addTypeRequest: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddTypeRequestDto"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TypeRequestDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  RequestController_editTypeRequest: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path: {
        typeRequestId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EditTypeRequestDto"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TypeRequestDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  RequestController_deleteTypeRequestById: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path: {
        typeRequestId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  RequestController_getRequestStatuses: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string[];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AddStoryRequestController_getAddStoryRequestAll: {
    parameters: {
      query: {
        /** @description номер первого элемента */
        start: number;
        /** @description количество элементов */
        count: number;
      };
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AddStoryRequestEntity"][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AddStoryRequestController_getAddStoryRequestForCurrentUser: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AddStoryRequestDto"][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AddStoryRequestController_getAddStoryRequestByUserId: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path: {
        userId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AddStoryRequestDto"][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AddStoryRequestController_createAddStoryRequestForCurrentUser: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateAddStoryRequestDto"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AddStoryRequestDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AddStoryRequestController_editStatusAddStoryReqeust: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path: {
        addStoryRequestId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EditAddStoryRequestDto"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AddStoryRequestEntity"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AddStoryRequestController_deleteAddStoryRequestById: {
    parameters: {
      query?: never;
      header?: {
        /** @description Пример: Bearer accessToken */
        authorization?: string;
      };
      path: {
        addStoryRequestId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
}
